buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.4"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

repositories {
    repositories {
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceSets {
    api {
        compileClasspath += configurations.getByName("minecraft")
    }
    vanillaApi {
        java {
            setSrcDirs([ 'src/vanilla-api/java' ])
        }
        resources {
            setSrcDirs([ 'src/vanilla-api/resources' ])
        }

        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += configurations.getByName("minecraft")
    }
    vanilla {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.vanillaApi.output
        runtimeClasspath += sourceSets.vanillaApi.output
        compileClasspath += configurations.getByName("minecraft")
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.vanilla.output
        runtimeClasspath += sourceSets.vanilla.output
        compileClasspath += sourceSets.vanillaApi.output
        runtimeClasspath += sourceSets.vanillaApi.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

version = (System.getenv().containsKey("Version") ? System.getenv("Version") : project.modVersion)
project.logger.lifecycle("Building for version: " + version);

group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: "${project.mcpChannel}", version: "${project.mcpVersion}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                aequivaleo {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.vanilla
                    source sourceSets.vanillaApi
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                aequivaleo {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.vanilla
                    source sourceSets.vanillaApi
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            args '--mod', project.modBaseName, '--all', '--output', file('src/generated/resources/'), '--input', file('src/main/resources')

            mods {
                aequivaleo {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.vanilla
                    source sourceSets.vanillaApi
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.exactMinecraftVersion}-${project.forgeVersion}"

    // unit testing
    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-core:1.+"
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4-rule-agent', version: '1.6.5'

    testCompile 'org.assertj:assertj-core:3.9.0'

    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    testRuntimeOnly group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version:'2.9.9'
    testRuntimeOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.10.0'

    //Utilities
    apiCompile 'com.intellij:annotations:+@jar'
    vanillaCompile 'com.intellij:annotations:+@jar'
    vanillaApiCompile 'com.intellij:annotations:+@jar'
    compile 'com.intellij:annotations:+@jar'
    testCompile 'com.intellij:annotations:+@jar'
    compile "org.jgrapht:jgrapht-core:${project.jgraphtVersion}"
    compile "org.jgrapht:jgrapht-ext:${project.jgraphtVersion}"
    compile "org.jgrapht:jgrapht-io:${project.jgraphtVersion}"
}

task apiJar(type: Jar) {
    from sourceSets.api.output
    classifier 'api'
    baseName project.name
}


task vanillaApiJar(type: Jar) {
    from sourceSets.vanillaApi.output
    classifier 'vanilla-api'
    baseName project.name
}

processResources {
    inputs.property "version", version
    inputs.property "MCversion", project.exactMinecraftVersion

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': version, 'MCversion': project.exactMinecraftVersion, 'forge_version': project.forgeMinVersion
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.vanillaApi.output
    from sourceSets.vanilla.output
    from sourceSets.main.output

    manifest {
        attributes([
                'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}:universal",
                'Timestamp': System.currentTimeMillis(),
                "Specification-Title": project.name.toLowerCase(),
                "Specification-Vendor": "ldtteam",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.version}",
                "Implementation-Vendor" :"ldtteam",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

javadoc {
    source += sourceSets.api.allSource
    source += sourceSets.vanillaApi.allSource
    source += sourceSets.vanilla.allSource

    configure( options ) {
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
    }
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task apiJavadocs(type: Javadoc) {
    source = sourceSets.api.allJava
    classpath = sourceSets.api.compileClasspath

    destinationDir = project.buildDir.toPath().resolve("docs/main/api").toFile()

    configure( options ) {
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
    }
}

task vanillaApiJavadocs(type: Javadoc) {
    source = sourceSets.vanillaApi.allJava
    classpath = sourceSets.vanillaApi.compileClasspath

    destinationDir = project.buildDir.toPath().resolve("docs/vanilla/api").toFile()

    configure( options ) {
        tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        )
    }
}

task packageApiJavadoc(type: Jar) {
    from apiJavadocs
    classifier = 'javadoc-api'
}

task packageVanillaApiJavadoc(type: Jar) {
    from vanillaApiJavadocs
    classifier = 'javadoc-vanilla-api'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    from sourceSets.api.allJava
    from sourceSets.vanillaApi.allJava
    from sourceSets.vanilla.allJava
}

task apiSourceJar(type: Jar) {
    classifier = 'api-sources'
    from sourceSets.api.allJava
}

task vanillaApiSourceJar(type: Jar){
    classifier = 'vanilla-api-sources'
    from sourceSets.vanillaApi.allJava
}

task setupDecompWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

task setupCIWorkspace {
    afterEvaluate {
        println "Setup"
    }
}

shadowJar {
    from sourceSets.main.output
    from sourceSets.vanillaApi.output
    from sourceSets.vanilla.output
    from sourceSets.api.output

    // Only shadow apache commons-math3
    dependencies {
        include dependency("org.jgrapht:jgrapht-core:${project.jgraphtVersion}")
        include dependency("org.jgrapht:jgrapht-ext:${project.jgraphtVersion}")
        include dependency("org.jgrapht:jgrapht-io:${project.jgraphtVersion}")
    }
    // Relocate apache commons-math3 to prevent conflicts with other mods that include it
    relocate 'org.jgrapht', 'com.ldtteam.shaded.jgrapht'

    classifier = 'universal' // Replace the default JAR
}

reobf {
    shadowJar {
    }
    apiJar {
        classpath = sourceSets.api.compileClasspath
    }
    vanillaApiJar {
        classpath = sourceSets.vanillaApi.compileClasspath
    }
}

curseforge {
    if (System.getenv().CURSEAPIKEY != null && System.getenv().CURSERELEASETYPE != null)
    {
        apiKey = System.getenv().CURSEAPIKEY
        def additionalVersions = project.additionalMinecraftVersions.split(',');

        project {
            id = '404450'
            addGameVersion project.minecraftVersion

            additionalVersions.each {
                addGameVersion it.trim()
            }

            changelog = file('build/changelog.md')
            changelogType = 'markdown'
            releaseType = System.getenv().CURSERELEASETYPE

            addArtifact packageApiJavadoc
            addArtifact apiSourceJar
            addArtifact sourceJar
            addArtifact apiJar
            addArtifact packageJavadoc
            addArtifact packageVanillaApiJavadoc
            addArtifact vanillaApiSourceJar

            mainArtifact(shadowJar)
        }
    }
    else
    {
        logger.lifecycle("Cannot run the CurseUpload sequence. No API-Key or release type has been provided.")
    }
}

task("createChangelog") {
    group = 'upload'

    doLast {
        def teamCityURL = "https://buildsystem.ldtteam.com/"
        def file = new FileOutputStream("build/changelog.md")
        def out = new BufferedOutputStream(file)
        def changesXML = new XmlSlurper().parse(teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.id"] + ")")

        def changes = changesXML.change
        logger.lifecycle("Identified " + changes.size() + " changes to be written into the changelog.")

        out << "# Aequivaleo Changelog \n"
        out << "## Version: _" + version + "_ \n"

        if (changes.size() > 0) {
            for (int i = 0; i < changes.size(); i++) {
                def changeDetailsURL = teamCityURL + "guestAuth/app/rest/changes/id:" + changes[i].@id.text()
                def changeDetailsXml = new XmlSlurper().parse(changeDetailsURL)
                def changeComment = changeDetailsXml.comment.text().trim()

                out << "* " + changeComment + "\n"
            }
        } else {
            out << "No Changes detected!"
        }

        out.close()
    }
}

artifacts {
    shadowJar
    packageJavadoc
    sourceJar
    apiJar
    packageApiJavadoc
    apiSourceJar
    vanillaApiJar
    vanillaApiSourceJar
    packageVanillaApiJavadoc
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group

            from components.java
            artifact shadowJar
            artifact packageJavadoc
            artifact sourceJar
            artifact apiJar
            artifact packageApiJavadoc
            artifact apiSourceJar
            artifact vanillaApiJar
            artifact packageVanillaApiJavadoc
            artifact vanillaApiSourceJar

            pom {
                url = 'https://github.com/ldtteam/Aequivaleo'
                licenses {
                    license {
                        name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'OrionDevelopment'
                        name = 'Marc Hermans'
                        email = 'marc.hermans@ldtteam.com'
                    }
                }
                contributors {
                    contributor {
                        id = 'ldtteam'
                        name = 'Let\'s Develop Together - Team'
                        email = 'info@ldtteam.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/ldtteam/aequivaleo.git'
                    developerConnection = 'scm:git:ssh://github.com/ldtteam/aequivaleo.git'
                    url = 'https://github.com/ldtteam/Aequivaleo'
                }
            }

            //Replace all deobf dependencies with normal jar references.
            pom.withXml { xmlProvider ->
                NodeList dependencies = asNode().dependencies
                NodeList allDeps = dependencies.'*';

                // Remove forge deps
                allDeps.findAll() { Node el ->
                    el.artifactId.text() == 'forge' && el.groupId.text() == 'net.minecraftforge'
                }.forEach() { Node el ->
                    el.parent().remove(el)
                }
                //remove forgegradle's mapped suffix from versions & set as optional so anyone else doesn't inherit them
                allDeps.findAll() { Node el ->
                    el.version.text().contains('_mapped_')
                }.each { Node el ->
                    NodeList version = el.version
                    version.each {
                        it.setValue(it.text().substring(0, it.text().indexOf('_mapped_')))
                    }
                }
            }
        }
    }

    if (System.getenv().containsKey("LDTTeamJfrogUsername") && System.getenv().containsKey("LDTTeamJfrogPassword")) {
        project.logger.log(LogLevel.WARN, "Uploading to JFrog enabled.")
        repositories {
            maven {
                name 'LDTTeamJfrog'
                credentials {
                    username System.getenv().get("LDTTeamJfrogUsername")
                    password System.getenv().get("LDTTeamJfrogPassword")
                }
                url 'https://ldtteam.jfrog.io/ldtteam/mods-maven'
            }
        }
    }
    else {
        project.logger.log(LogLevel.WARN, "Uploading to JFrog disabeled.")
    }
}


